// .for
.for(@i, @n) {.-each(@i)}
.for(@n)     when (isnumber(@n)) {.for(1, @n)}
.for(@i, @n) when not (@i = @n)  {
    .for((@i + (@n - @i) / abs(@n - @i)), @n);
}
// .for-each
.for(@array)   when (default()) {.for-impl_(length(@array))}
.for-impl_(@i) when (@i > 1)    {.for-impl_((@i - 1))}
.for-impl_(@i) when (@i > 0)    {.-each(extract(@array, @i))}
// Define your main colour palette using whatever naming system you like


@light-blue: #06B7F4;
@gray: #9F9F9F;
@light-gray: #f1f1f1;
@white: #ffffff;
@white-smoke: #f5f5f5;
@black: #000;
@mid-black: #242424;
@yellow: #FFAB52;
@dark-brown: #1D1D1D;
@light-black: #444;
@red: rgba(224, 14, 14, 98);
@transparent: transparent;
@droplet-blue: #17D4E2;
@lower-gray-opa: rgba(29, 29, 29, 0.10);
@low-gray-opa: rgba(29, 29, 29, 0.45);
@low-black-opa: rgba(0,0,0,0.25);
@mid-black-opa: rgba(0,0,0,0.50);
@high-black-opa: rgba(0,0,0,0.75);
@low-white-opa: rgba(255,255,255,0.25);
@mid-white-opa: rgba(255,255,255,0.50);
@high-white-opa: rgba(255,255,255,0.75);
@blue-purple-gradient: linear-gradient(89.94deg, #09ABED 1.42%, #0B6BC9 100%);
@black-gradient: linear-gradient(180deg, rgba(29, 29, 29, 0) 0%, #1D1D1D 100%);

@colors:
    'light-blue',
    'gray',
    'light-gray',
    'white',
    'white-smoke',
    'black',
    'mid-black',
    'yellow',
    'dark-brown',
    'light-black',
    'red',
    'transparent',
    'droplet-blue',
    'lower-gray-opa',
    'low-gray-opa',
    'low-black-opa',
    'mid-black-opa',
    'high-black-opa',
    'low-white-opa',
    'mid-white-opa',
    'high-white-opa',
    'blue-purple-gradient',
    'black-gradient';

.theme{
  .for(@colors); .-each(@color) {
    @key: e(@color);
    @value: @@key;
    //Gradient theming
    &.gradient-@{key} {
        background: @value;
    }
    //BG theming
    &.bg-@{key} {
        background-color: @value;
    }
    &.bg-lg-@{key} {
        @media(min-width: ~"991px"){
            background-color: @value !important;
        }
    }
    &.bg-md-@{key} {
        @media(min-width: ~"767px"){
            background-color: @value !important;
        }
    }
    &.bg-sm-@{key} {
        @media(min-width: ~"575px"){
            background-color: @value !important;
        }
    }
    &.bg-active-@{key}:active {
        background-color: @value;
    }
    &.bg-before-@{key}:before {
        background-color: @value;
    }
    &.bg-after-@{key}:after {
        background-color: @value;
    }
    &.bg-hover-@{key}:hover {
        background-color: @value;
    }
    &.bg-label-checked-@{key} {
        &:checked + label {
            background-color: @value;
        }
    }
    //Color theming
    &.color-@{key} {
        color: @value;
    }
    &.color-lg-@{key} {
        @media(min-width: ~"991px"){
            color: @value !important;
        }
    }
    &.color-md-@{key} {
        @media(min-width: ~"767px"){
            color: @value !important;
        }
    }
    &.color-sm-@{key} {
        @media(min-width: ~"575px"){
            color: @value !important;
        }
    }
    &.color-active-@{key}:active {
        color: @value;
    }
    &.color-before-@{key}:before {
        color: @value;
    }
    &.color-after-@{key}:after {
        color: @value;
    }
    &.color-hover-@{key}:hover {
        color: @value;
    }
    &.color-label-checked-@{key} {
        &:checked + label {
            color: @value;
        }
    }
    //Box shadow
    &.box-shadow-@{key} {
        box-shadow: 0px 3px 10px @value;
    }
    //Fill for svgs
    &.fill-@{key} {
        fill: @value;
    }
    //Border theming
    &.border-@{key} {
        border-width: 1px;
        border-style: solid;
        border-color: @value;
    }
    &.border-after-@{key}:after {
        border-color: @value;
    }
    &.border-before-@{key}:before {
        border-color: @value;
    }
    //Input field theming
    &.input-focus-label-@{key}{
        &:focus{
            + label{
                color:@value;
            }
        }
    }
    &.place-holder-@{key} {
        ::-webkit-input-placeholder {
          color: @value;
        }
        ::-moz-placeholder {
          color: @value;
        }
        :-ms-input-placeholder {
          color: @value;
        }
        :-moz-placeholder {
          color: @value;
        }
    }
  }
}

.loop (0) {}
.loop (@index) when (@index > 0) {
  .z-index-@{index} {
    z-index: @index * 1;
  }
  .loop (@index - 1);
}
.loop(20);
